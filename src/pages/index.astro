<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Real-Time ASCII Art</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: white;
      font-family: monospace;
      font-size: px;
      white-space: pre;
      overflow: hidden;
    }
    #ascii {
      line-height: 1em;
    }
  </style>
</head>
<body>
  <pre id="ascii"></pre>

  <script>
    const asciiElement = document.getElementById("ascii");
    let width = 150;   // Keep low for performance in browser
    let height = 60;
    const chars = "@%#*+=-:. "; // Brightness levels

    // Store previous frame for smooth transitions
    let prevGrid = null;

    // Remove controls and dropdowns, set shape to 'diamond' by default
    let shape = 'diamond';
    let waveShape = 'sine'; // Keep default for wave effect

    // Center the ASCII art
    asciiElement.style.position = 'absolute';
    asciiElement.style.top = '50%';
    asciiElement.style.left = '50%';
    asciiElement.style.transform = 'translate(-50%, -50%)';
    asciiElement.style.margin = '0';

    function getRandomChar() {
      return chars[Math.floor(Math.random() * chars.length)];
    }

    function lerpChar(a, b, t) {
      // Interpolate between two chars by their index in chars
      const ia = chars.indexOf(a);
      const ib = chars.indexOf(b);
      const idx = Math.round(ia + (ib - ia) * t);
      return chars[Math.max(0, Math.min(chars.length - 1, idx))];
    }

    function isInShape(x, y) {
      // Center coordinates
      const cx = width / 2;
      const cy = height / 2;
      const dx = x - cx + 0.5;
      const dy = y - cy + 0.5;
      // Only diamond shape
      const d = Math.min(width, height) * 0.65 / 2;
      return Math.abs(dx) + Math.abs(dy) <= d;
    }

    function applyWaveShape(val) {
      if (waveShape === 'sine') return Math.sin(val);
      if (waveShape === 'square') return Math.sign(Math.sin(val));
      if (waveShape === 'triangle') return 2 * Math.abs(2 * (val / (2 * Math.PI) - Math.floor(val / (2 * Math.PI) + 0.5))) - 1;
      return Math.sin(val);
    }

    function generateFrame() {
      let frame = "";
      let grid = Array.from({ length: height }, () => Array(width).fill(" "));
      const now = Date.now() / 1000; // seconds for animation
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          if (!isInShape(x, y)) {
            grid[y][x] = ' ';
            continue;
          }
          // Use previous frame for smoothness
          let prevChar = prevGrid && prevGrid[y] && prevGrid[y][x] ? prevGrid[y][x] : getRandomChar();

          // Blend with neighbors for organic flow
          let neighborIndices = [];
          if (prevGrid) {
            if (y > 0) neighborIndices.push(chars.indexOf(prevGrid[y - 1][x]));
            if (x > 0) neighborIndices.push(chars.indexOf(prevGrid[y][x - 1]));
            if (y < height - 1) neighborIndices.push(chars.indexOf(prevGrid[y + 1][x]));
            if (x < width - 1) neighborIndices.push(chars.indexOf(prevGrid[y][x + 1]));
          }
          let prevIdx = chars.indexOf(prevChar);
          let avgNeighborIdx = neighborIndices.length
            ? neighborIndices.reduce((a, b) => a + b, 0) / neighborIndices.length
            : prevIdx;

          // Interpolate between prevChar and average neighbor index
          let t = 0.5 + 0.3 * Math.random(); // blend more with neighbors
          let interpIdx = prevIdx + (avgNeighborIdx - prevIdx) * t;

          // Psychedelic multi-layered modulation
          let mod1 = applyWaveShape(now * 0.7 + x * 0.04 - y * 0.03);
          let mod2 = applyWaveShape(now * 2.1 + x * 0.09 + y * 0.13);
          let mod3 = applyWaveShape(now * 1.7 + x * 0.13 - y * 0.11 + applyWaveShape(now * 0.5 + x * 0.07));
          let mod4 = applyWaveShape((x + y) * 0.05 + now * 3 + applyWaveShape(x * 0.03 - y * 0.02 + now));
          let wave = applyWaveShape(
            (x / 12) + (y / 7) + now * 1.2
            + applyWaveShape(now + x * 0.03 + y * 0.04)
            + mod1 * 1.5
            + mod2 * 1.2
            + mod3 * 0.7
            + mod4 * 0.5
          );
          // Map wave from [-1,1] to [-2.5,2.5] for stronger effect
          wave *= 2.5;

          // Occasionally invert brightness for unpredictability
          let invert = Math.random() < 0.04 ? -1 : 1;

          // Apply wave and inversion to brightness index
          let waveIdx = Math.round(interpIdx + wave * invert);

          // Add sparkle: random chance to use brightest or darkest char
          let sparkle = Math.random();
          let baseChar;
          if (sparkle < 0.01) {
            baseChar = chars[0]; // brightest
          } else if (sparkle > 0.99) {
            baseChar = chars[chars.length - 1]; // darkest
          } else {
            baseChar = chars[Math.max(0, Math.min(chars.length - 1, waveIdx))];
          }

          // Occasionally introduce new randomness
          if (Math.random() < 0.08) {
            baseChar = getRandomChar();
          }

          grid[y][x] = baseChar;
        }
      }
      prevGrid = grid;
      for (let y = 0; y < height; y++) {
        frame += grid[y].join("") + "\n";
      }
      asciiElement.textContent = frame;
    }

    // Initialize prevGrid with random chars
    function initPrevGrid() {
      prevGrid = Array.from({ length: height }, () =>
        Array.from({ length: width }, () => getRandomChar())
      );
    }

    initPrevGrid();

    // Use requestAnimationFrame for animation, throttled to 20fps
    let lastFrameTime = 0;
    function animate(now) {
      if (!lastFrameTime || now - lastFrameTime >= 50) { // ~20fps
        generateFrame();
        lastFrameTime = now;
      }
      requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
  </script>

  <!-- Monospace text box under the ASCII art -->
  <div style="position:absolute; left:50%; top:calc(50% + 220px); transform:translateX(-50%); color:white; font-family:monospace; font-size:1em; letter-spacing:0.08em; text-align:center; background:rgba(0,0,0,0.7); padding:8px 16px; border-radius:2px; box-shadow:0 2px 12px #0008;">
    
_________  ________      _____  .___ _______    ________    _________________   ________    _______   <br>
\_   ___ \ \_____  \    /     \ |   |\      \  /  _____/   /   _____/\_____  \  \_____  \   \      \  <br>
/    \  \/  /   |   \  /  \ /  \|   |/   |   \/   \  ___   \_____  \  /   |   \  /   |   \  /   |   \ <br>
\     \____/    |    \/    Y    \   /    |    \    \_\  \  /        \/    |    \/    |    \/    |    \<br>
 \______  /\_______  /\____|__  /___\____|__  /\______  / /_______  /\_______  /\_______  /\____|__  /<br>
        \/         \/         \/            \/        \/          \/         \/         \/         \/ <br>
  </div>
</body>
</html>