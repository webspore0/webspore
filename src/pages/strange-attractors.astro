---
// No frontmatter needed for this conversion
---
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>3D Grid Particle Attractor Simulation</title>
    <style>
      body {
        margin: 0;
        background: #000;
        overflow: hidden;
      }
      #controls {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.7);
        padding: 5px;
        border-radius: 5px;
        color: #fff;
        font-family: sans-serif;
        z-index: 10;
      }
      #controls select {
        font-size: 0.9em;
      }
      #equations {
        position: absolute;
        top: 50px;
        left: 10px;
        color: rgba(255, 255, 255, 0.5);
        font-family: monospace;
        font-size: 0.8em;
        line-height: 1.2em;
        white-space: pre;
        z-index: 10;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>
    <div id="controls">
      <label style="color: #fff;">
        Attractor:
        <select id="attractor">
          <option value="lorenz">Lorenz</option>
          <option value="rossler">RÃ¶ssler</option>
          <option value="chen">Chen</option>
        </select>
      </label>
      <label style="color: #fff; margin-left: 10px;">
        Speed:
        <input
          type="range"
          id="speed"
          min="0.1"
          max="3"
          step="0.01"
          value="1"
          style="vertical-align: middle;"
        />
      </label>
    </div>
    <div id="equations"></div>

    <script type="module">
    window.addEventListener('load', () => {
      const canvas = document.getElementById('canvas');
      const ctx = canvas.getContext('2d');
      let width = canvas.width = window.innerWidth;
      let height = canvas.height = window.innerHeight;

      // Get controls
      const attractorSelect = document.getElementById('attractor');
      const speedInput = document.getElementById('speed');
      const equationsDiv = document.getElementById('equations');

      window.addEventListener('resize', () => {
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;
      });

      // Particle class
      class Particle {
        constructor(x, y) {
          this.x = x;
          this.y = y;
          this.vx = (Math.random() - 0.5) * 2;
          this.vy = (Math.random() - 0.5) * 2;
          this.size = Math.random() * 3 + 1;
          this.color = `hsl(${Math.random() * 360}, 80%, 60%)`;
        }

        update(attractors) {
          // Apply attraction forces
          attractors.forEach(a => {
            const dx = a.x - this.x;
            const dy = a.y - this.y;
            const dist = Math.sqrt(dx * dx + dy * dy);
            const force = (a.strength || 200) / (dist * dist + 100);
            this.vx += force * dx;
            this.vy += force * dy;
          });

          // Move
          this.x += this.vx;
          this.y += this.vy;

          // Slow down
          this.vx *= 0.98;
          this.vy *= 0.98;

          // Bounce off edges
          if (this.x < 0 || this.x > width) {
            this.vx *= -1;
            this.x = Math.max(0, Math.min(this.x, width));
          }
          if (this.y < 0 || this.y > height) {
            this.vy *= -1;
            this.y = Math.max(0, Math.min(this.y, height));
          }
        }

        draw(ctx) {
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = this.color;
          ctx.fill();
        }
      }

      // Setup
      const particles = [];
      const attractors = [{ x: width / 2, y: height / 2, strength: 100 }];
      const PARTICLE_COUNT = 300;

      for (let i = 0; i < PARTICLE_COUNT; i++) {
        particles.push(new Particle(Math.random() * width, Math.random() * height));
      }

      // Interaction
      canvas.addEventListener('mousemove', e => {
        const rect = canvas.getBoundingClientRect();
        attractors[0] = { x: e.clientX - rect.left, y: e.clientY - rect.top, strength: 100 };
      });
      canvas.addEventListener('click', e => {
        const rect = canvas.getBoundingClientRect();
        attractors.push({ x: e.clientX - rect.left, y: e.clientY - rect.top, strength: -200 });
        setTimeout(() => attractors.pop(), 1000);
      });
      window.addEventListener('keydown', e => {
        if (e.key === 'r') {
          particles.length = 0;
          for (let i = 0; i < PARTICLE_COUNT; i++) {
            particles.push(new Particle(Math.random() * width, Math.random() * height));
          }
        }
      });

      // Animation loop
      function animate() {
        ctx.clearRect(0, 0, width, height);
        particles.forEach(p => {
          p.update(attractors);
          p.draw(ctx);
        });
        requestAnimationFrame(animate);
      }

      animate();
    });
    </script>
  </body>
</html>